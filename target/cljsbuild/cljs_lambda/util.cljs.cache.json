["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Object",["^ "]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$cljs-lambda.util","~:imports",null,"~:requires",["^ ","~$ctx","~$cljs-lambda.context","~$p","~$promesa.core","^@","^@","^?","^?","~$async","~$cljs.core.async","^B","^B","~$cljs.core.async.impl.protocols","^C","~$cljs.nodejs","^D","~$nodejs","^D","~$async-p","^C"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^B","~$>!","^B"],"~:defs",["^ ","~$wrap-lambda-fn",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/lucywang/Documents/SoftwareEngineering/sorority-attendance/target/cljsbuild/cljs_lambda/util.cljs","~:line",12,"~:column",7,"~:end-line",12,"~:end-column",21,"~:arglists",["~#list",["~$quote",["^U",[["~$f"]]]]],"~:doc","Prepare a two-arg (event, context) function for exposure as a Lambda handler.\n  The returned function will convert the event (Javascript Object) into a\n  Clojurescript map with keyword keys, and turn the context into a record having\n  keys `:aws-request-id`, `:client-context`, `:log-group-name`,\n  `:log-stream-name` & `:function-name` - suitable for manipulation\n  by [[context/done!]]  etc."],"^:","~$cljs-lambda.util/wrap-lambda-fn","~:variadic",false,"^O","target/cljsbuild/cljs_lambda/util.cljs","^S",21,"~:method-params",["^U",[["~$f"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^Q",1,"^P",12,"^R",12,"~:max-fixed-arity",1,"~:fn-var",true,"^T",["^U",["^V",["^U",[["~$f"]]]]],"^W","Prepare a two-arg (event, context) function for exposure as a Lambda handler.\n  The returned function will convert the event (Javascript Object) into a\n  Clojurescript map with keyword keys, and turn the context into a record having\n  keys `:aws-request-id`, `:client-context`, `:log-group-name`,\n  `:log-stream-name` & `:function-name` - suitable for manipulation\n  by [[context/done!]]  etc."],"~$chan?",["^ ","^M",null,"^N",["^ ","^O","/Users/lucywang/Documents/SoftwareEngineering/sorority-attendance/target/cljsbuild/cljs_lambda/util.cljs","^P",29,"^Q",8,"^R",29,"^S",13,"~:private",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"^14",true,"^:","~$cljs-lambda.util/chan?","^Y",false,"^O","target/cljsbuild/cljs_lambda/util.cljs","^S",13,"^Z",["^U",[["~$x"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",29,"^R",29,"^11",1,"^12",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"~$error?",["^ ","^M",null,"^N",["^ ","^O","/Users/lucywang/Documents/SoftwareEngineering/sorority-attendance/target/cljsbuild/cljs_lambda/util.cljs","^P",32,"^Q",8,"^R",32,"^S",14,"^14",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"^14",true,"^:","~$cljs-lambda.util/error?","^Y",false,"^O","target/cljsbuild/cljs_lambda/util.cljs","^S",14,"^Z",["^U",[["~$x"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",32,"^R",32,"^11",1,"^12",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"~$invoke-async",["^ ","~:no-doc",true,"^M",null,"^N",["^ ","^O","/Users/lucywang/Documents/SoftwareEngineering/sorority-attendance/target/cljsbuild/cljs_lambda/util.cljs","^P",35,"^Q",16,"^R",35,"^S",28,"^19",true,"^T",["^U",["^V",["^U",[["~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^Y",true,"^11",1,"^Z",[["^U",["~$f","^1:"]]],"^T",["^U",[["~$f","~$&","^1:"]]],"^10",["^U",[null]]]],"^:","~$cljs-lambda.util/invoke-async","^Y",true,"^O","target/cljsbuild/cljs_lambda/util.cljs","^S",28,"^1;",["^ ","^Y",true,"^11",1,"^Z",[["^U",["~$f","^1:"]]],"^T",["^U",[["~$f","~$&","^1:"]]],"^10",["^U",[null]]],"^Z",[["^U",["~$f","^1:"]]],"^[",null,"^10",["^U",[null]],"^Q",1,"^P",35,"^R",35,"^11",1,"^12",true,"^T",["^U",[["~$f","~$&","^1:"]]]],"~$handle-errors",["^ ","^M",null,"^N",["^ ","^O","/Users/lucywang/Documents/SoftwareEngineering/sorority-attendance/target/cljsbuild/cljs_lambda/util.cljs","^P",47,"^Q",7,"^R",47,"^S",20,"^T",["^U",["^V",["^U",[["~$f","~$error-handler"]]]]],"^W","Returns a Lambda handler delegating to the input handler `f`, conveying any\n  errors to `error-handler`, a function of `[error event ctx]`, which has the\n  opportunity to modify the eventual handler response (rethrow, return\n  promise/channel, etc.)\n\n```clojure\n(def ^:export successful-fn\n  (-> (fn [event ctx] (p/rejected (js/Error.)))\n      (handle-errors (fn [e event ctx] \"Success\"))\n      async-lambda-fn))\n```"],"^:","~$cljs-lambda.util/handle-errors","^Y",false,"^O","target/cljsbuild/cljs_lambda/util.cljs","^S",20,"^Z",["^U",[["~$f","^1>"]]],"^[",null,"^10",["^U",[null,null]],"^Q",1,"^P",47,"^R",47,"^11",2,"^12",true,"^T",["^U",["^V",["^U",[["~$f","^1>"]]]]],"^W","Returns a Lambda handler delegating to the input handler `f`, conveying any\n  errors to `error-handler`, a function of `[error event ctx]`, which has the\n  opportunity to modify the eventual handler response (rethrow, return\n  promise/channel, etc.)\n\n```clojure\n(def ^:export successful-fn\n  (-> (fn [event ctx] (p/rejected (js/Error.)))\n      (handle-errors (fn [e event ctx] \"Success\"))\n      async-lambda-fn))\n```"],"~$async-lambda-fn",["^ ","^M",null,"^N",["^ ","^O","/Users/lucywang/Documents/SoftwareEngineering/sorority-attendance/target/cljsbuild/cljs_lambda/util.cljs","^P",65,"^Q",7,"^R",65,"^S",22,"^T",["^U",["^V",["^U",[["~$f","~$&",[["^ ","~:keys",["^1>"]]]]]]]],"^W","Repurpose the two-arg (event, context) asynchronous function `f` as a Lambda\n  handler.  The function's result determines the invocation's success at the\n  Lambda level, without the requirement of using\n  Lambda-specific ([[context/fail!]], etc.) functionality within the body.\n  Optional error handler behaves as [[handle-errors]].\n\n  If the handler was passed a callback by the Lambda harness, that function will\n  be used to signal completion, over the the context methods.\n\nSuccess:\n\n* Returns successful Promesa/Bluebird promise\n* Returns `core.async` channel containing non-`js/Error`\n* Synchronously returns arbitrary object\n\n```clojure\n(def ^:export wait\n  (async-lambda-fn\n   (fn [{n :msecs} ctx]\n     (promesa/delay n :waited))))\n```\n\nFailure:\n\n* Returns rejected Promesa/Bluebird promise\n* Returns `core.async` channel containing `js/Error`\n* Synchronously throws `js/Error`\n\n```clojure\n(def ^:export blow-up\n  (async-lambda-fn\n   (fn [_ ctx]\n     (go\n       (<! (async/timeout 10))\n       (js/Error. \"I blew up\")))))\n```\n\n  See [[macros/deflambda]] for an alternative approach to defining/export\n  handler vars.","^1;",["^ ","^Y",true,"^11",1,"^Z",[["^U",["~$f",[["^ ","^1A",["^1>"]]]]]],"^T",["^U",[["~$f","~$&",[["^ ","^1A",["^1>"]]]]]],"^10",["^U",[null]]]],"^:","~$cljs-lambda.util/async-lambda-fn","^Y",true,"^O","target/cljsbuild/cljs_lambda/util.cljs","^S",22,"^1;",["^ ","^Y",true,"^11",1,"^Z",[["^U",["~$f",[["^ ","^1A",["^1>"]]]]]],"^T",["^U",[["~$f","~$&",[["^ ","^1A",["^1>"]]]]]],"^10",["^U",[null]]],"^Z",[["^U",["~$f",[["^ ","^1A",["^1>"]]]]]],"^[",null,"^10",["^U",[null]],"^Q",1,"^P",65,"^R",65,"^11",1,"^12",true,"^T",["^U",[["~$f","~$&",[["^ ","^1A",["^1>"]]]]]],"^W","Repurpose the two-arg (event, context) asynchronous function `f` as a Lambda\n  handler.  The function's result determines the invocation's success at the\n  Lambda level, without the requirement of using\n  Lambda-specific ([[context/fail!]], etc.) functionality within the body.\n  Optional error handler behaves as [[handle-errors]].\n\n  If the handler was passed a callback by the Lambda harness, that function will\n  be used to signal completion, over the the context methods.\n\nSuccess:\n\n* Returns successful Promesa/Bluebird promise\n* Returns `core.async` channel containing non-`js/Error`\n* Synchronously returns arbitrary object\n\n```clojure\n(def ^:export wait\n  (async-lambda-fn\n   (fn [{n :msecs} ctx]\n     (promesa/delay n :waited))))\n```\n\nFailure:\n\n* Returns rejected Promesa/Bluebird promise\n* Returns `core.async` channel containing `js/Error`\n* Synchronously throws `js/Error`\n\n```clojure\n(def ^:export blow-up\n  (async-lambda-fn\n   (fn [_ ctx]\n     (go\n       (<! (async/timeout 10))\n       (js/Error. \"I blew up\")))))\n```\n\n  See [[macros/deflambda]] for an alternative approach to defining/export\n  handler vars."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^7","^7","^A","^B","^B","^B"],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:else","~:recur","~:error-handler","~:handler-callback","~:keywordize-keys"]],"~:order",["^1K","^1G","^1H","^1I","^1J"]],"^W",null]